// 1024 게임의 최초 업그레이드버전
// dbInsert()부 추가 : 쿼리문을 sprintf_s로 받음.

#include <iostream>
#include <string>
#include <Windows.h>
#include <cstdlib>
#include <ctime>
#include <conio.h>
#include <mysql.h>
 
#define XSIZE 4
#define YSIZE 4 
using namespace std;

int game_board[XSIZE][YSIZE]={0};

int level = 0;
int higher = 0;
int turn = 0;
char name[50];

void game() { 
	cout << "---------------------------------------------" << endl;
	cout << "            어서 오세요 1024입니다.          " << endl;
	cout << "---------------------------------------------" << endl;
	cout << " 난이도를 선택해 주세요(스페이스 바로 선택)" << endl;
	cout << "easy";
	char key;
	for (;;) {
		key = _getch();

		if (key == 75) {
			cout << "\b\b\b\bhard";
			level = 1;
		}
		if (key == 77) {
			cout << "\b\b\b\beasy";
			level = 0;
		}
		if (key == 32) {
			cout << "\b\b\b\b";
			break;
		}
	}
	if (level == 0)
		cout << "easy 모드" << endl;
	else
		cout << "hard 모드" << endl;
	srand((unsigned)time(NULL));
	for (int i = 0; i < 3;) {
		int x = rand() % XSIZE;
		int y = rand() % YSIZE;
		if (game_board[x][y] == 0) {
			game_board[x][y] = 1;
			i++;
		}
	}
	system("cls");
}

int blank(int x){
	int y = 1;
	if (x / 100 == 0) {
		if (x / 10 == 0) {
			y++;
		}
		y++;
	}
	return y;
}

bool show(){
	bool check = false; 

	cout << "---------------------------------------------" << endl;
	cout << "            즐거운 게임 하십시오.            " << endl;
	cout << "---------------------------------------------" << endl;

	if(level == 0)
		cout << "                easy 모드                    " << endl;
	else
		cout << "                hard 모드                    " << endl;
 
	cout << "---------------------------------------------" << endl;
	for (int i = 0; i < XSIZE; i++) {
		for (int j = 0; j < YSIZE; j++) {
			for (int k = 0; k < blank(game_board[i][j]); k++) {
				cout << " ";
			}
			if (higher < game_board[i][j]) {
				higher = game_board[i][j];
			}
			if (game_board[i][j] == 0) {
				check = true;
			}
			cout << game_board[i][j];
		}
		cout << endl;
	}
	cout << "end?" << endl;
	cout << "최고 숫자 : " << higher << endl;
	cout << "턴 : " << turn / 2 << endl;
	return check;
}

void game_rule(char end) {
	for (int n = 0; n < XSIZE; n++) {
		for (int i = 0; i < XSIZE; i++) {
			for (int j = 0; j < YSIZE; j++) {
				if (end == 75) {
					if (j != 0) { 
						if (game_board[i][j - 1] == 0) {
							game_board[i][j - 1] = game_board[i][j];
							game_board[i][j] = 0;
						}
						else if (game_board[i][j - 1] == game_board[i][j]) {
							game_board[i][j - 1] += game_board[i][j];
							game_board[i][j] = 0;
						}
					}
				}
				if (end == 72) {
					if (i != 0) {
						if (game_board[i - 1][j] == 0) {
							game_board[i - 1][j] = game_board[i][j];
							game_board[i][j] = 0;
						}
						else if (game_board[i - 1][j] == game_board[i][j]) {
							game_board[i - 1][j] += game_board[i][j];
							game_board[i][j] = 0;
						}
					}
				}
			}
		}
		for (int i = XSIZE - 1; i >= 0; i--) {
			for (int j = YSIZE - 1; j >= 0; j--) {
				if (end == 77) {
					if (j != 3) {
						if (game_board[i][j + 1] == 0) {
							game_board[i][j + 1] = game_board[i][j];
							game_board[i][j] = 0;
						}
						else if (game_board[i][j + 1] == game_board[i][j]) {
							game_board[i][j + 1] += game_board[i][j];
							game_board[i][j] = 0;
						}
					}
				}
				if (end == 80) {
					if (i != 3) {
						if (game_board[i + 1][j] == 0) {
							game_board[i + 1][j] = game_board[i][j];
							game_board[i][j] = 0;
						}
						else if (game_board[i + 1][j] == game_board[i][j]) {
							game_board[i + 1][j] += game_board[i][j];
							game_board[i][j] = 0;
						}
					}
				}
			}
		}
	}
}

void game_rule() {
	srand((unsigned)time(NULL));
	int j = 0;
	if (level == 0) {
		if ((turn % 2) == 1) {
			for (int i = 0; i < 1; j++) {
				int x = rand() % XSIZE;
				int y = rand() % YSIZE;
				if (game_board[x][y] == 0) {
					game_board[x][y] = 1;
					i++;
				}
				if (j > 1000) {
					break;
				}
			}
		}
	}
	else {
		for (int i = 0; i < 1; j++) {
			int x = rand() % XSIZE;
			int y = rand() % YSIZE;
			if (game_board[x][y] == 0) {
				game_board[x][y] = 1;
				i++;
			}
			if (j > 1000) {
				break;
			}
		}
	}
}

////////////////////// 여기서부터 추가된 부분임 ////////////////////////////////

int dbInsert() {
	const char* host = "localhost";
	const char* user = "root";
	const char* pw = "1234";
	const char* db = "game";

	MYSQL* connection = NULL;
	MYSQL con;

	if (mysql_init(&con) == NULL) {
		cout << "Error : Can't DB Connect";
	}

	connection = mysql_real_connect(&con, host, user, pw, db, 3306, (const char*)NULL, 0);

	if (connection == NULL) {
		cout << mysql_errno(&con) << "Error" << mysql_error(&con);
		return 1;
	}
	else {
		if (mysql_select_db(&con, db)) {
			cout << mysql_errno(&con) << "Error" << mysql_error(&con);
			return 1;
		}
		mysql_query(connection, "set names euckr");

		int state;
		char query[255];
		sprintf_s(query, "insert into game values ('%s', '%d', '%d')", name, higher, turn);

		state = mysql_query(connection, query);

		if (state != 0) {
			cout << mysql_errno(&con) << "Error" << mysql_error(&con);
			return 1;
		}
	}
}

////////////////////// 여기까지가 추가한 부분임 ////////////////////////////////

int main(){
	char end;
	game();
	for (;;) {
		if (show() == false) {
			cout << "실패 하셨습니다. 다음기회를 노려 주세요!" << endl;
			cout << "기록을 저장하기 위한 이름을 입력해주세요 : ";
			cin >> name;
			dbInsert();
			break;
		}
		end =_getch();

		if (end == 'y') {
			break;
		}
		game_rule(end);

		if (higher >= 1024) {
			cout << "1024를 달성하셨습니다. 축하합니다!";
			cout << "기록을 저장하기 위한 이름을 입력해주세요 : ";
			cin >> name;
			dbInsert();
			break;
		}
		game_rule();
		turn++;
		system("cls");
	}
}

/////////////////////// 201 ~ 242줄 추가됨 ////////////////////////////////////
///////////////// main에 250~252줄, 264~266줄 추가함 : 목적 - db에 기록을 저장하기 위해 dbInsert의 함수를 사용하기 위함 ///////////////////
