int dbInsert() {
	const char* host = "localhost";
	const char* user = "root";
	const char* pw = "1234";
	const char* db = "game";

	MYSQL* connection = NULL;
	MYSQL con;
	
	//연결이 안될 경우 에러 메세지 출력 
	if (mysql_init(&con) == NULL) {
		cout << "Error : Can't DB Connect"; 
	} 

	connection = mysql_real_connect(&con, host, user, pw, db, 3306, (const char*)NULL, 0); // MYSQL 구조체의 주소, 호스트 주소, id, pw, 포트, 소켓, flag

	//커넥션을 얻는 데 실패 할 경우 에러 발생
	if (connection == NULL) {
		cout << mysql_errno(&con) << "Error" << mysql_error(&con);
		return 1;
	} 
	else {
		//db선택, 실패 할 경우 에러 발생 
		if (mysql_select_db(&con, db)) {
			cout << mysql_errno(&con) << "Error" << mysql_error(&con);
			return 1;
		}

		int state;
		char query[255];
		//char배열 query에 쿼리문을 넣어준다. 
		sprintf_s(query, "insert into game values ('%s', '%d', '%d')", name, higher, turn);
		//쿼리문 전송에 성공하면 1, 실패 시 0 반환 
		state = mysql_query(connection, query);
		//쿼리문 전송에 성공했는지 여부 판단, 실패 시 에러 발생 
		if (state != 0) {
			cout << mysql_errno(&con) << "Error" << mysql_error(&con);
			return 1;
		}
	}
}

/// 여기부터 6/6 추가코드
void dbSelect() {
	// DB 접속 정보
	const char* host = "localhost";
	const char* user = "root";
	const char* pw = "1234";
	const char* db = "game";
	
	MYSQL* connection = NULL;
	MYSQL con;
	MYSQL_RES* sql_result;
	MYSQL_ROW sql_row;

	// 출력될 데이터(name, higher, turn)를 벡터로 선언함
	vector<pair<pair<int, int>, string>> sql_data;

	// 연결 안될 시에 에러 메시지 출력
	if (mysql_init(&con) == NULL) {
		cout << "Error : Can't DB Connect";
	}
	
	connection = mysql_real_connect(&con, host, user, pw, db, 3306, (const char*)NULL, 0);

	if (connection == NULL) {
		cout << mysql_errno(&con) << "Error" << mysql_error(&con);
	}
	else {
		if (mysql_select_db(&con, db)) {
			cout << mysql_errno(&con) << "Error" << mysql_error(&con);
		}

		int state;
		char query[255];
		
		// DB의 정보를 출력하기 위한 쿼리문
		sprintf_s(query, "select * from game order by name, higher, turn");
		
		// 쿼리문을 DB
		state = mysql_query(connection, query);

		if (state == 0) {
			// sql_result에 DB에서 출력해준 값이 저장됨
			sql_result = mysql_store_result(connection);
			
			// sql_row에 DB에 출력해준 값을 한 줄 씩 저장함 (sql_row[0], sql_row[1], ...)
			while ((sql_row = mysql_fetch_row(sql_result)) != NULL) {
				// higher_and_turn 변수에 sql_row[1]과 sql_row[2]의 데이터를 페어함, [1]에는 higher, [2]에는 turn이 있음.
				// 단, sql_row의 값이 char형식이므로 int로 바꿔주기 위한 atoi 사용
				pair<int, int> higher_and_turn = make_pair(atoi(sql_row[1]), atoi(sql_row[2]) * -1);
				
				// 추카코드 57줄에 있는 sql_data에 형식대로 값을 삽입함
				sql_data.push_back(make_pair(higher_and_turn, string(sql_row[0])));
			}
			
			// sql_data에 들어있는 값들을 정렬함
			sort(sql_data.begin(), sql_data.end(), greater<pair<pair<int, int>, string>>());

			// sql_data의 값이 끝날때까지 출력해줌
			for (auto i = sql_data.begin(); i != sql_data.end(); i++)
			
				// 이렇게 출력되는 값 : name(second) | higher(first.first) | turn(first.second)
				cout << "|" << (*i).second << "\t|      " << (*i).first.first << "\t|   " << (*i).first.second * -1 << "\t|" <<endl;

			mysql_free_result(sql_result);
		}
		mysql_close(connection);
	}
}
